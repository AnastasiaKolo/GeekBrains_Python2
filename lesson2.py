# #1. Задание на закрепление знаний по модулю CSV. Написать скрипт, осуществляющий
# выборку определенных данных из файлов info_1.txt, info_2.txt, info_3.txt и
# формирующий новый  «отчетный» файл в формате CSV.
# Для этого:
# Создать функцию get_data(), в которой в цикле осуществляется  перебор файлов с
# данными, их открытие и считывание данных. В этой функции из считанных данных
#  необходимо с помощью регулярных выражений извлечь значения параметров
# «Изготовитель системы», «Название ОС», «Код продукта», «Тип системы».
# --------------------------------------------------------------------------------

import re
from typing import List, Any


def get_data(files):
    templates = ['Изготовитель системы*:', 'Название ОС*:', 'Код продукта*:', 'Тип системы*:']
    for curr_file in files:
        with open(curr_file) as file_i:
            for line in file_i:
                line = line.strip()
                for template in templates:
                    match = re.match(template, line)
                    if match:
                        if template == templates[0]:
                            os_prod_list.append(line[match.end():].strip())
                            main_data['Изготовитель системы'].append(line[match.end():].strip())
                        if template == templates[1]:
                            os_name_list.append(line[match.end():].strip())
                            main_data['Название ОС'].append(line[match.end():].strip())
                        if template == templates[2]:
                            os_code_list.append(line[match.end():].strip())
                            main_data['Код продукта'].append(line[match.end():].strip())
                        if template == templates[3]:
                            os_type_list.append(line[match.end():].strip())
                            main_data['Тип системы'].append(line[match.end():].strip())


os_prod_list: List[Any] = []
os_name_list: List[Any] = []
os_code_list: List[Any] = []
os_type_list = []
main_data = ['Изготовитель системы', 'Название ОС', 'Код продукта', 'Тип системы']
input_files = ['info_1.txt', 'info_2.txt', 'info_3.txt']
get_data(input_files)
print(os_prod_list, '\n', os_name_list, '\n', os_code_list, '\n', os_type_list, '\n')

# --------------------------------------------------------------------------------
# Значения каждого параметра поместить в
# соответствующий список. Должно получиться четыре списка — например,
# os_prod_list, os_name_list, os_code_list, os_type_list. В этой же функции
# создать главный список для хранения данных отчета — например, main_data — и
# поместить в него названия столбцов отчета в виде списка: «Изготовитель системы»,
# «Название ОС», «Код продукта»,# «Тип системы». Значения для этих столбцов
# также оформить в виде списка и поместить в файл main_data (также для
# каждого файла);
# Создать функцию write_to_csv(), в которую передавать ссылку на CSV-файл.
# В этой функции реализовать получение данных через вызов функции get_data(),
# а также сохранение подготовленных данных в соответствующий CSV-файл;
# Проверить работу программы через вызов функции write_to_csv(). ###


# 2. Задание на закрепление знаний по модулю json.
# #  Есть файл orders в формате JSON с информацией о заказах. Написать скрипт,
# автоматизирующий его заполнение данными.
# #  Для этого:
# Создать функцию write_order_to_json(), в которую передается 5 параметров —
# товар (item), количество (quantity), цена (price), покупатель (buyer), дата
# (date). Функция должна предусматривать  запись данных в виде словаря в файл
# orders.json. При записи данных указать величину отступа в 4 пробельных символа;
# Проверить работу программы через вызов функции write_order_to_json() с передачей
# в нее значений каждого
# параметра. ###


# 3. Задание на закрепление знаний по модулю yaml. Написать скрипт, автоматизирующий
# сохранение данных в файле YAML-формата. Для этого:
# Подготовить данные для записи в виде словаря, в котором первому ключу соответствует
#  список, второму — целое# число, третьему — вложенный словарь, где значение
# каждого ключа — это целое число с юникод-символом, отсутствующим в кодировке
# ASCII (например, €);
# Реализовать сохранение данных в файл формата YAML — например, в файл file.yaml.
# При этом обеспечить стилизацию# файла с помощью параметра default_flow_style,
# а также установить возможность работы с юникодом: allow_unicode = True;
# Реализовать считывание данных из созданного файла и проверить, совпадают ли
# они с исходными.
